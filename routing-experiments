
Retry these experiments they give very weird results using this network topology:

	[[ns: net1]] == veth1_in(10.0.1.3/24) ==> veth1_out(10.0.1.2/24) [[ns: net2]]
	     ||
	      \== veth2_in(10.0.1.4/24) ==> veth2_out(10.0.1.2/24) [[ns: net3]]

nick /home/nick/Desktop/github/netns-packet-analysis master$ sudo ip netns exec net1 ping -c1 10.0.1.2			SUCCESS
nick /home/nick/Desktop/github/netns-packet-analysis master$ sudo ip netns exec net1 ping -I 10.0.1.4 -c1 10.0.1.2	SUCCESS
nick /home/nick/Desktop/github/netns-packet-analysis master$ sudo ip netns exec net1 ping -I 10.0.1.3 -c1 10.0.1.2	SUCCESS
nick /home/nick/Desktop/github/netns-packet-analysis master$ sudo ip netns exec net1 ping -I veth1_in -c1 10.0.1.2	SUCCESS
nick /home/nick/Desktop/github/netns-packet-analysis master$ sudo ip netns exec net1 ping -I veth2_in -c1 10.0.1.2	FAIL
nick /home/nick/Desktop/github/netns-packet-analysis master$ sudo ip netns exec net2 ping -c1 10.0.1.3			SUCCESS
nick /home/nick/Desktop/github/netns-packet-analysis master$ sudo ip netns exec net2 ping -c1 10.0.1.4			SUCCESS
nick /home/nick/Desktop/github/netns-packet-analysis master$ sudo ip netns exec net3 ping -c1 10.0.1.3			FAIL
nick /home/nick/Desktop/github/netns-packet-analysis master$ sudo ip netns exec net3 ping -c1 10.0.1.4			FAIL


Let's isolate this one, it looked especially weird:

	*) sudo ip netns exec net1 ping -I veth2_in -c1 10.0.1.2

		We see the ARP exchange between veth2_in and veth2_out worked:

			22:08:37.813085 7e:c1:b7:b0:fc:78 > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 42: Ethernet (len 6), IPv4 (len 4), Request who-has 10.0.1.2 tell 10.0.1.4, length 28
			22:08:37.813108 be:25:bb:2c:6d:ad > 7e:c1:b7:b0:fc:78, ethertype ARP (0x0806), length 42: Ethernet (len 6), IPv4 (len 4), Reply 10.0.1.2 is-at be:25:bb:2c:6d:ad, length 28

		We then see the ICMP exchange between veth2_in and veth2_out seems to have worked as well:

			22:08:37.813111 7e:c1:b7:b0:fc:78 > be:25:bb:2c:6d:ad, ethertype IPv4 (0x0800), length 98: (tos 0x0, ttl 64, id 21741, offset 0, flags [DF], proto ICMP (1), length 84)
    			    10.0.1.4 > 10.0.1.2: ICMP echo request, id 26360, seq 1, length 64
			22:08:37.813124 be:25:bb:2c:6d:ad > 7e:c1:b7:b0:fc:78, ethertype IPv4 (0x0800), length 98: (tos 0x0, ttl 64, id 6537, offset 0, flags [none], proto ICMP (1), length 84)
			    10.0.1.2 > 10.0.1.4: ICMP echo reply, id 26360, seq 1, length 64

		After this, we see veth2_out ask veth2_in who 10.0.1.4 is .. and veth2_in does not respond (weird):

			22:08:42.898241 be:25:bb:2c:6d:ad > 7e:c1:b7:b0:fc:78, ethertype ARP (0x0806), length 42: Ethernet (len 6), IPv4 (len 4), Request who-has 10.0.1.4 tell 10.0.1.2, length 28
			22:08:43.922245 be:25:bb:2c:6d:ad > 7e:c1:b7:b0:fc:78, ethertype ARP (0x0806), length 42: Ethernet (len 6), IPv4 (len 4), Request who-has 10.0.1.4 tell 10.0.1.2, length 28
			22:08:44.946247 be:25:bb:2c:6d:ad > 7e:c1:b7:b0:fc:78, ethertype ARP (0x0806), length 42: Ethernet (len 6), IPv4 (len 4), Request who-has 10.0.1.4 tell 10.0.1.2, length 28

		We see no traffic between veth1_in and veth1_out.
		So... how can we fail despite the exchange having happened correctly?
